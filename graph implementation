class graph:
    def __init__(self,nVertices):
        self.nVertices = nVertices
        self.adjMatrix = [[0 for i in range(nVertices)] for j in range(nVertices)]
    def addEdge(self,v1, v2):
        self.adjMatrix[v1][v2] = 1
        self.adjMatrix[v2][v1] = 1
    
    def removeEdge(self,v1,v2):
        if containsEdge(v1,v2) is False:
            return
        self.adjMatrix[v1][v2] = 0
        self.adjMatrix[v2][v1] = 0
    
    def containsEdge(self,v1,v2):
        if self.adjMatrix[v1][v2] == 1:
            return True
        else:
            return False
    def printBFSHelper(self,sv,visited):
        q = queue.Queue()
        q.put(sv)
        while not(q.empty()):
            curr_ver = q.get()
            visited[curr_ver] = True
            print(curr_ver)
            for i in range(self.nVertices):
                if (self.adjMatrix[curr_ver][i]) > 0 and visited[i] is False:
                    q.put(i)
        
    def printBFS(self,sv):
        visited = [False for i in range(self.nVertices)]
        self.printBFSHelper(sv,visited)
        
G = graph(5)
G.addEdge(1,2)
G.addEdge(3,4)
G.addEdge(2,3)
print(G.adjMatrix)
